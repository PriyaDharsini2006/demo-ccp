// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String       @id @default(uuid())
  fullName    String
  email       String       @unique
  password    String
  userType    UserType
  startups    Startup[]    // One-to-many relationship with Startup
  innovations Innovation[] // One-to-many relationship with Innovation
  researches  Research[]   // One-to-many relationship with Research
  session     Session?
  image       String?
}

model GSTInfo {
  id       String    @id @default(uuid())
  gstin    String    @unique // GST Identification Number
  invoices Invoice[] // Reference to multiple GST invoice records
  startups Startup[] // Reference to multiple Startups
}

model Invoice {
  id           String   @id @default(uuid())
  gstInfoId    String
  gstInfo      GSTInfo  @relation(fields: [gstInfoId], references: [id], onDelete: Cascade)
  retPeriod    DateTime
  checksum     String?
  summaryType  String?
  totalRecords Int?
  totalTax     Float?
  actualTax    Float?
  totalValue   Float?
  profit       Float?
}

model Startup {
  id          String        @id @default(uuid())
  name        String
  mantra      String
  description String?
  type        SoftwareType?
  domain      Domain?
  vision      String?
  mission     String?
  imageURL    String?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gstin       String?       @unique
  overview    Overview?
  gstInfo     GSTInfo?      @relation(fields: [gstin], references: [gstin], onDelete: SetNull)
  status      Status        @default(PENDING)
  fundingDetails FundingDetails?
}

enum UserType {
  INVESTOR
  ENTREPRENEUR
  INNOVATOR
  RESEARCHER
}

enum SoftwareType {
  APPLICATION
  SYSTEM
  PLATFORM
  OTHER
}

enum Domain {
  HEALTHCARE
  FINTECH
  EDUCATION
  ECOMMERCE
  OTHER
}

enum Status {
  ACCEPTED
  REJECTED
  PENDING
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @unique
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Innovation {
  id           String   @id @default(uuid())
  title        String
  description  String
  detailedDesc String? // Detailed description of the innovation
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  innovatorId  String
  innovator    User     @relation(fields: [innovatorId], references: [id], onDelete: Cascade)
  status       Status   @default(PENDING)
  fundingDetails FundingDetails?
}

model Overview {
  id              String  @id @default(uuid())
  noOfEmployees   Int
  currentProjects Int
  prevProjects    Int
  fundsRaised     Int
  startupId       String  @unique
  startup         Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Research {
  id           String   @id @default(uuid())
  title        String
  description  String
  detailedDesc String?  // Detailed description of the research
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  researcherId String
  researcher   User     @relation(fields: [researcherId], references: [id], onDelete: Cascade)
  status       Status   @default(PENDING)
  fundingDetails FundingDetails?
}

model FundingDetails {
  id          String   @id @default(uuid())
  amount      Float
  currency    String   @default("USD")
  approvedAt  DateTime @default(now())
  description String?
  notes       String?
  
  // Relations - only one of these will be set
  innovationId String? @unique
  innovation   Innovation? @relation(fields: [innovationId], references: [id], onDelete: Cascade)
  
  researchId   String? @unique
  research     Research? @relation(fields: [researchId], references: [id], onDelete: Cascade)
  
  startupId    String? @unique
  startup      Startup? @relation(fields: [startupId], references: [id], onDelete: Cascade)
}